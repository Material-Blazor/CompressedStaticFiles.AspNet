@page "/"

<PageTitle>Index</PageTitle>

<h1>Setting your project up to use static file compression</h1>

<ul>
    <li>Include the <code>CompressedStaticFiles.AspNetCore</code> nuget package in your project;</li>
    <li>Add the compressed static files service by calling <code>builder.Services.AddCompressedStaticFiles();</code> in <code>Program.cs</code>;</li>
    <li>Replace <code>app.UseStaticFiles();</code> with <code>app.UseCompressedStaticFiles();</code> in Program.cs;</li>
    <li>Add the lines at the bottom of this page to your CSPROJ file just before the closing; and</li>
    <li>
        We also tend to use standard <a href="https://docs.microsoft.com/en-us/aspnet/core/performance/response-compression?view=aspnetcore-6.0" target="_blank">ASP.NET response compression</a> to compress everything
        that is not a pre-compressed static file. We have added commented out source for this in this project's <code>Program.cs</code> file. Note that
        pre-compressed static files are served in preference to dynamically compressing responses. This is good because pre-compression is faster at runtime
        and also generates smaller response payloads.
    </li>
</ul>

<p>Some compression metrics for <code>bootstrap.min.css</code>:</p>
<ul>
    <li style="color: red;">Uncompressed response size: 163 kB;</li>
    <li style="color: darkorange;">Dynamic compressed response size (Brotli): 35.5 kB; and</li>
    <li style="color: green;">Pre-compressed response size (Brotli): 17.5 kB: SUCCESS!</li>
</ul>

<h1 style="margin-top: 48px;">How to detect file compression</h1>

<p>
    Press F12 to enter your browser's development tools and select the network tab (we did this on Edge here).
    Click any css or js file (except for blazor.server.js, which as an ASP.NET framework file isn't compressed)
    and you will see that either Brotli or GZIP compression has been applied if your browser supports compression.
    The screenshot below shows how to detect this.
</p>

<img src="images/compression-evidence.png" alt="Demonstration of Brotli compressed file download" style="width: 1020px;">

<h1 style="margin-top: 48px;">CSPROJ code to compress files</h1>

<p>
    The following code block can be added to the end of your CSPROJ before the closing <code>&lt;/Project&gt;</code> line.
    You can copy this block of code from here or see it working in this example website's CSPROJ file.
</p>

<pre><code>
    &lt;PropertyGroup&gt;
        &lt;!--Paths to tools, tasks, and extensions are calculated relative to the BlazorWebAssemblySdkDirectoryRoot.
            But there does not seem to be a property for that, so after much trial and error, using the property 
            ILLinkTasksAssembly seems most reliable as it contains the same value whether the build is run from VS 
            or the command line, unlike many others such as MSBuildSDKsPath.
            If a better property is identified, this can be changed.            
        --&gt;

        &lt;!-- First, we strip the property value back to the root SDKs level and then down into the WebAssembly SDK --&gt;
        &lt;_SDKRoot&gt;$(ILLinkTasksAssembly.Substring(0,$(ILLinkTasksAssembly.LastIndexOf('Microsoft.NET.ILLink.Tasks'))))&lt;/_SDKRoot&gt;
        &lt;BlazorWebAssemblySdkDirectoryRoot&gt;$(_SDKRoot)\Microsoft.NET.Sdk.BlazorWebAssembly\&lt;/BlazorWebAssemblySdkDirectoryRoot&gt;

        &lt;!-- The next four lines are Copyright (c) .NET Foundation. All rights reserved. --&gt;
        &lt;_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' == 'Core'"&gt;net6.0&lt;/_BlazorWebAssemblySdkTasksTFM&gt;
        &lt;_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' != 'Core'"&gt;net472&lt;/_BlazorWebAssemblySdkTasksTFM&gt;
        &lt;_BlazorWebAssemblySdkTasksAssembly&gt;$(BlazorWebAssemblySdkDirectoryRoot)tools\$(_BlazorWebAssemblySdkTasksTFM)\Microsoft.NET.Sdk.BlazorWebAssembly.Tasks.dll&lt;/_BlazorWebAssemblySdkTasksAssembly&gt;
        &lt;_BlazorWebAssemblySdkToolAssembly&gt;$(BlazorWebAssemblySdkDirectoryRoot)tools\net6.0\Microsoft.NET.Sdk.BlazorWebAssembly.Tool.dll&lt;/_BlazorWebAssemblySdkToolAssembly&gt;
    &lt;/PropertyGroup&gt;

    &lt;!-- The next two lines are Copyright (c) .NET Foundation. All rights reserved. --&gt;
    &lt;UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BrotliCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" /&gt;
    &lt;UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.GzipCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" /&gt;




    &lt;!--
        This target runs after build. If you want to run after Publish, change:
        - AfterTargets should be set to "Build"
        - "ProjectDir" in MyStaticFiles should be changed to "PublishDir"
    --&gt;
    &lt;Target Name="CustomGZipAndBrotliCompression" AfterTargets="Build"&gt;

        &lt;!--************* THIS IS WHERE YOU CHOOSE WHAT TO COMPRESS *****************
            you probably don't want to change anything else - just this ItemGroup--&gt;

        &lt;ItemGroup&gt;
            &lt;MyStaticFiles Include="$(ProjectDir)/wwwroot/**/*.css" /&gt;
            &lt;MyStaticFiles Include="$(ProjectDir)/wwwroot/**/*.js" /&gt;
        &lt;/ItemGroup&gt;

        &lt;!--Call the BlazorWebAssembly Task GZipCompress and store the results in MyCompressedFiles--&gt;
        &lt;GZipCompress FilesToCompress="@@(MyStaticFiles)" OutputDirectory="$(IntermediateOutputPath)compress\"&gt;
            &lt;Output TaskParameter="CompressedFiles" ItemName="MyCompressedFiles" /&gt;
        &lt;/GZipCompress&gt;

        &lt;!--Call the BlazorWebAssembly Task BrotliCompress and store the results in MyCompressedFiles--&gt;
        &lt;BrotliCompress OutputDirectory="$(IntermediateOutputPath)compress\" FilesToCompress="@@(MyStaticFiles)" ToolAssembly="$(_BlazorWebAssemblySdkToolAssembly)" ToolExe="$(_RazorSdkDotNetHostFileName)" ToolPath="$(_RazorSdkDotNetHostDirectory)"&gt;
            &lt;Output TaskParameter="CompressedFiles" ItemName="MyCompressedFiles" /&gt;
        &lt;/BrotliCompress&gt;

        &lt;!--Log what we have done--&gt;
        &lt;Message Importance="High" Text="======= Brotli/GZip Compression For @@(MyCompressedFiles-&gt;Count()) Static Files =======" /&gt;
        &lt;Message Importance="High" Text=" Compressed: %(MyCompressedFiles.OriginalItemSpec)%(MyCompressedFiles.Extension)" /&gt;

        &lt;!--Rename/move the compressed files back to to the correct place/names as they have "hashed" names at this stage.--&gt;
        &lt;Move SourceFiles="%(MyCompressedFiles.FullPath)" DestinationFiles="%(MyCompressedFiles.OriginalItemSpec)%(MyCompressedFiles.Extension)" /&gt;

    &lt;/Target&gt;
    &lt;ItemGroup&gt;
        &lt;ProjectReference Include="..\CompressedStaticFiles.AspNetCore\CompressedStaticFiles.AspNetCore.csproj" /&gt;
    &lt;/ItemGroup&gt;
    &lt;ItemGroup&gt;
        &lt;Folder Include="wwwroot\images\" /&gt;
    &lt;/ItemGroup&gt;
</code></pre>

<h1 style="margin-top: 48px;">Attribution</h1>

<p>Thanks to the following:</p>
<ul>
    <li>This project is a fork of Peter Andersson's from whose original <a href="https://github.com/AnderssonPeter/CompressedStaticFiles" target="_blank">CompressedStaticFiles repo</a>; and</li>
    <li><a href="https://github.com/SQL-MisterMagoo" target="_blank">SQL-MisterMagoo</a> for providing the MSBUILD code that performs Brotli and GZIP static file compression.</li>
</ul>

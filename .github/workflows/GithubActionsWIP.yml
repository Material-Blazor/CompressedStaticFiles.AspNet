name: GithubActionsWIP

on:
  push:
    branches:
      - 'main'

  pull_request:
    branches:
      - 'main'

env:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  outputCSFB: ${{github.workspace}}/siteCSFB
  projectCSFB: 'CompressedStaticFiles.AspNet/CompressedStaticFiles.AspNet.csproj'
  projectTest: 'CompressedStaticFiles.AspNet.Test/CompressedStaticFiles.AspNet.Test.csproj'

jobs:

############################################################################################################
# These jobs are used to gate actions. By creating these jobs we don't need to proliferate the repo checks
############################################################################################################
  is-on-fork:
    name: Running on a fork?
    runs-on: ubuntu-latest
    if: github.repository != 'Material-Blazor/CompressedStaticFiles.AspNet'
    steps:
    - name: Nothing to see here
      run: echo ""

  is-on-material-blazor:
    name: Running on Material-Blazor/CompressedStaticFiles.AspNet?
    runs-on: ubuntu-latest
    if: github.repository == 'Material-Blazor/CompressedStaticFiles.AspNet'
    steps:
    - name: Nothing to see here
      run: echo ""

############################################################################################################
# This job is only to display some CI information
############################################################################################################
  info:
    name: Display CI information
    runs-on: windows-latest

    steps:

    - name: DotNet info
      run: dotnet --info
      if: github.event_name != 'workflow_dispatch'

    - name: Set ciSuffix as env variable
      run: echo "ciSuffix=ci.$(date +'%Y-%m-%d--%H%M')" >> $GITHUB_ENV
      shell: bash
      if: github.event_name != 'workflow_dispatch'

    - name: Echo ciSuffix
      run: echo "CI suffix is $ciSuffix"
      shell: bash
      if: github.event_name != 'workflow_dispatch'

    - name: Get the branch
      id: get_branch
      run: echo ::set-output name=branch::${GITHUB_REF/refs\/heads\//}
      shell: bash
      if: github.event_name != 'workflow_dispatch'

    - name: Get the pullrequest
      id: get_pullrequest
      run: echo ::set-output name=pullrequest::${GITHUB_REF/refs\/pull\//}
      shell: bash
      if: github.event_name != 'workflow_dispatch'

    - name: Get the tag
      id: get_tag
      run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}
      shell: bash
      if: github.event_name != 'workflow_dispatch'

    - name: Show branch name Ꙫ
      run: echo GitHub indicates that this is a branch push request of ${{steps.get_branch.outputs.branch}}
      if: github.event_name != 'workflow_dispatch' && contains(github.ref, 'refs/heads')

    - name: Show PR name Ꙫ
      run: echo GitHub indicates that this is a pull request called ${{steps.get_pullrequest.outputs.pullrequest}}
      if: github.event_name != 'workflow_dispatch' && contains(github.ref, 'refs/pull')

    - name: Show Tag name Ꙫ
      run: echo GitHub indicates that this is a tag creation with ${{steps.get_tag.outputs.tag}}
      if: github.event_name != 'workflow_dispatch' && contains(github.ref, 'refs/tag')

############################################################################################################
# Store the version information
############################################################################################################
  version:
    name: Set version suffix
    runs-on: ubuntu-latest

    steps:
    - id: get
      run: |
        echo "ci.$(date +'%Y-%m-%d--%H%M')"
        echo "ciSuffix2::ci.$(date +'%Y-%m-%d--%H%M')" >> $GITHUB_ENV
      
      
############################################################################################################
# Run the test project. Should this fail, the deploy step (job deployghpages) is skipped
# This is soft-skipped when we only want to perform a comparison (github.event_name != 'workflow_dispatch')
############################################################################################################
  test:
    name: Run .NET tests
    runs-on: windows-latest
    env:
      config: 'Release'

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET6
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true
#    - name: Install dependencies
#      run: dotnet restore --verbosity normal
#    - name: Build
#      run: dotnet build --configuration $config --no-restore
#    - name: Test
#      run: dotnet test --configuration $config --no-restore --no-build --verbosity normal --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=lcov
#    - name: Find lcov file path
#      id: find-lcov-file-path
#      shell: pwsh
#      run: |
#        $FilePath = (Get-ChildItem CompressedStaticFiles.Tests\TestResults\* | Select-Object -First 1 | Get-ChildItem).FullName
#        Write-Host ::set-output name=path::$FilePath
#    - name: Publish coverage report to coveralls.io
#      uses: coverallsapp/github-action@master
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        path-to-lcov: ${{ steps.find-lcov-file-path.outputs.path }}
      
############################################################################################################
# Build nuget package
# This is hard-skipped when we only want to perform a comparison (github.event_name != 'workflow_dispatch')
############################################################################################################
  build-package:
    name: Build nuget package
    needs: [info, test, version]

    runs-on: windows-latest
    if: github.event_name != 'workflow_dispatch'

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Use prelease dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true
      if: github.event_name != 'workflow_dispatch'

    - name: Build CompressedStaticFiles.AspNetCore 🔧
      run: dotnet build ${{env.projectCSFB}} --configuration ${{env.buildConfiguration}} --version-suffix ${env.ciSuffix}

    - name: Generate the NuGet package 🔧
      run: dotnet pack ${{env.projectCSFB}} --no-build --configuration ${{env.buildConfiguration}} --output ${{env.outputCSFB}} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --version-suffix ${env.ciSuffix}

    - name: Display CompressedStaticFiles.AspNetCore package output Ꙫ
      run: dir ${{env.outputCSFB}}

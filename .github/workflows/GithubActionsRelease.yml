name: GithubActionsRelease

############################################################################################################
# All of thes jobs runs commands only on a tag push in the Material-Blazor\Material.Blazor repository
# The publishing actions in forked repositories were handled by the WIP workflow
# An 'ExitWorkflow' action is sorely needed
############################################################################################################
# NUGET_API_KEY is valid through 9/11/2021
############################################################################################################

on:
  push:
    tags:
      - '*' # Push events to matching *, i.e. 1.0, 20.15.10

env:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  outputCSFB: ${{github.workspace}}\siteCSFB
  projectCSFB: 'CompressedStaticFiles.AspNet/CompressedStaticFiles.AspNet.csproj'
  projectTest: 'CompressedStaticFiles.AspNet.Test/CompressedStaticFiles.AspNet.Test.csproj'
 
jobs:

############################################################################################################
# These jobs are used to gate actions. By creating these jobs we don't need to proliferate the repo checks
############################################################################################################
  is-on-fork:
    name: Running on a fork?
    runs-on: ubuntu-latest
    if: github.repository != 'Material-Blazor/CompressedStaticFiles.AspNet'
    steps:
    - name: Nothing to see here
      run: echo ""

  is-on-material-blazor:
    name: Running on Material-Blazor/CompressedStaticFiles.AspNet?
    runs-on: ubuntu-latest
    if: github.repository == 'Material-Blazor/CompressedStaticFiles.AspNet'
    steps:
    - name: Nothing to see here
      run: echo ""

############################################################################################################
# Run the test project. Should this fail, we don't perform any deploy action
############################################################################################################
  test:
    name: Run .NET tests
    runs-on: windows-latest
    env:
      config: 'Release'

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET6
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true
#    - name: Install dependencies
#      run: dotnet restore --verbosity normal
#    - name: Build
#      run: dotnet build --configuration $config --no-restore
#    - name: Test
#      run: dotnet test --configuration $config --no-restore --no-build --verbosity normal --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=lcov
#    - name: Find lcov file path
#      id: find-lcov-file-path
#      shell: pwsh
#      run: |
#        $FilePath = (Get-ChildItem CompressedStaticFiles.Tests\TestResults\* | Select-Object -First 1 | Get-ChildItem).FullName
#        Write-Host ::set-output name=path::$FilePath
#    - name: Publish coverage report to coveralls.io
#      uses: coverallsapp/github-action@master
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        path-to-lcov: ${{ steps.find-lcov-file-path.outputs.path }}

############################################################################################################
# Store the version information
############################################################################################################
  version:
    name: Set version identifier
    runs-on: windows-latest
    steps:
    - id: get
      shell: bash
      run: |
        echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
############################################################################################################
# Store the branch information
############################################################################################################
  branch:
    name: Set branch identifier
    runs-on: windows-latest
    steps:
    - id: get
      shell: bash
      run: |
        echo "{branch}=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_ENV

############################################################################################################
# Build package and deploy
############################################################################################################
  build-and-deploy-package:
    name: Build nuget package & deploy to nuget
    needs: [version, branch, is-on-material-blazor, test]

    runs-on: windows-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Use prelease dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    - name: Build CompressedStaticFiles.AspNetCore 🔧
      run: dotnet build ${{env.projectCSFB}} --configuration ${{env.buildConfiguration}} -p:Version=${{env.version}}

    - name: Generate the NuGet package 🔧
      run: dotnet pack ${{env.projectCSFB}} --no-build --configuration ${{env.buildConfiguration}} --output ${{env.outputCSFB}} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:Version=${{env.version}}

    - name: Display CompressedStaticFiles.AspNetCore package output Ꙫ
      run: dir ${{env.outputCSFB}}

    #- name: Upload Package 🚀
    #  run: dotnet nuget push ${{env.outputCSFB}}\*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json

############################################################################################################
# Create release
############################################################################################################
  #create-release:
  #  name: Create release
  #  needs: [build-and-deploy-package, branch, version, is-on-material-blazor]

  #  runs-on: ubuntu-latest

  #  steps:
  #  - name: Create Release
  #    uses: actions/create-release@v1
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      tag_name: ${version}
  #      release_name: Release ${version}
  #      draft: false
  #      prerelease: false
